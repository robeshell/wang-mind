from langchain.prompts import PromptTemplate
from typing import Dict, List

class MindMapPrompts:
    # 基础思维导图模板（用于短文本）
    MINDMAP_TEMPLATE = """
    你是一位专业的文档分析专家和思维导图制作大师。请仔细分析以下文本内容，生成一个详尽的思维导图。要求如下：

    文本内容：
    {text}

    一、内容要求：
    1. 全面提取文档的核心主题、关键概念、重要论述和具体论点
    2. 识别并展现文档的层次结构、逻辑关系和知识体系
    3. 突出重点内容，标注关键词和核心观点
    4. 保留重要的定义、数据、案例和结论

    二、结构要求：
    1. 使用最多4层层级结构，保持层次清晰
    2. 第一层为核心主题（使用"#"）
    3. 第二层为主要分支（使用"##"）
    4. 第三层为具体概念（使用"###"）
    5. 第四层为详细要点（使用"-"或"*"）

    请以 Markdown 格式返回思维导图内容。确保结构严谨、层次分明、重点突出、内容完整。
    """

    # 主要观点提取模板（用于长文本的第一步）
    MAIN_POINTS_TEMPLATE = """
    你是一位专业的文档分析专家。请从以下文本中提取主要观点和核心结构，生成一个完整的知识框架：

    文本内容：
    {text}

    要求：
    1. 提取文档的核心主题和关键创新点
    2. 识别4-5个主要技术或方法论要点
    3. 提取重要的实验结果和性能指标
    4. 捕捉文档中的技术突破和贡献
    5. 确保涵盖：
       - 技术原理和创新
       - 实现方法和架构
       - 性能评估和结果
       - 应用场景和影响
       - 局限性和未来方向

    请以 Markdown 格式返回，使用二级标题表示主要观点，并为每个观点添加简要说明。
    """

    # 基于主要观点的思维导图生成模板（用于长文本的第二步）
    MINDMAP_WITH_POINTS_TEMPLATE = """
    你是一位专业的思维导图制作大师。请基于以下主要观点和详细内容，生成一个技术分析思维导图：

    主要观点：
    {main_points}

    详细内容：
    {details}

    要求：
    1. 第一层（核心主题）：
       - 使用"#"标记
       - 准确概括技术本质
       - 突出创新价值

    2. 第二层（主要分支）：
       - 使用"##"标记
       - 包含4-5个关键维度：
         * 技术原理
         * 创新特点
         * 实现方法
         * 应用效果
         * 发展方向

    3. 第三层（具体要点）：
       - 使用"###"标记
       - 每个二级分支下3-4个要点
       - 确保要点具体且有深度
       - 包含技术细节和数据支持

    4. 第四层（详细说明）：
       - 使用"-"标记
       - 每个三级标题下至少3-4点
       - 内容类型包括：
         * 具体的技术参数
         * 实验数据和结果
         * 应用案例
         * 优势分析
         * 实现细节
         * 改进方向

    5. 整体要求：
       - 保持专业性和技术深度
       - 突出创新点和关键技术
       - 包含具体的数据和案例
       - 注重逻辑性和完整性
       - 每个要点都要有充分的展开和说明

    示例格式：
    # 技术名称：核心创新与价值

    ## 技术原理
    ### 基本架构
    - 详细的架构组成
    - 关键组件说明
    - 工作流程
    - 创新特点

    ### 核心机制
    - 具体的技术细节
    - 算法说明
    - 优化方法
    - 性能特点

    ## 实现方法
    ...（按相同结构展开）

    请确保输出的思维导图结构完整、内容专业、重点突出。
    """

    @staticmethod
    def get_mindmap_template() -> str:
        return MindMapPrompts.MINDMAP_TEMPLATE

    @staticmethod
    def get_main_points_template() -> str:
        return MindMapPrompts.MAIN_POINTS_TEMPLATE

    @staticmethod
    def get_mindmap_with_points_template() -> str:
        return MindMapPrompts.MINDMAP_WITH_POINTS_TEMPLATE